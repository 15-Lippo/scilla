import ListUtils

library Test

let no_msg = Nil {Message}

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg


contract Test
(owner: Address)

field gmap : Map Address (Pair (Int32) (Int32))  = Emp Address (Pair (Int32) (Int32))


transition testMapPair ()
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    gmap_tmp <- gmap;  
    one = Int32 1;
    two = Int32 2;
    p = Pair {(Int32) (Int32)} one two;   
    gmap_new = builtin put gmap_tmp _sender p;
    gmap := gmap_new;  
    send no_msg
  | True =>
    gmap_tmp <- gmap;  
    three = Int32 3;
    four = Int32 4;
    p = Pair {(Int32) (Int32)} three four;   
    gmap_new = builtin put gmap_tmp _sender p;
    gmap := gmap_new;  
    send no_msg
  end
end

transition addNumToList(num: Int64)
    (* Start of list declaration *)
    nil = Nil{Int64};
    l1 = let one = Int64 1 in Cons{Int64} one nil;
    l2 = Cons{Int64} num l1;
    l3 = let nine = Int64 9 in Cons{Int64} nine l2;
    len = let my_list_length = @list_length Int64 in my_list_length l3;
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; listLength : len};
    msgs = one_msg msg;
    send msgs
end
