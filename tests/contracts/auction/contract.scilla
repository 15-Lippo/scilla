(***************************************************)
(*               Associated library                *)
(***************************************************)

library OpenAuction

let orb = 
  fun (b : Bool) => fun (c : Bool) =>
    match b with 
    | True  => True
    | False =>
      match c with 
      | False => False
      | True  => True
      end
    end

let negb = fun (b : Bool) => 
  match b with
  | True => False
  | False => True
  end

let blk_leq =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk1 blk2 in 
    let bc2 = builtin eq blk1 blk2 in 
    orb bc1 bc2


let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg
    
    
let late_to_bid_code = Int32 1
let bid_too_low_code = Int32 2
let updated_bid_accepted_code  = Int32 3
let new_bid_accepted_code  = Int32 4
let money_sent_code  = Int32 5
let nothing_to_withdraw_code  = Int32 6
let auction_is_still_on_code  = Int32 7
let auction_end_code  = Int32 8
   
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)


contract OpenAuction
(*  Parameters *)
(auctionStart : BNum,
 biddingTime  : Uint128,
 beneficiary  : Address
)

(* Mutable fields *)

field ended : Bool = False
field highestBidder  : Option Address  = None {Address}
field highestBid     : Uint128 = Uint128 0
field pendingReturns : Map Address Uint128 = Emp Address Uint128


(* Transition 1: bidding *)
transition Bid ()
  blk <- & BLOCKNUMBER;
  endtime = builtin badd auctionStart biddingTime;
  after_end = let one = Uint128 1 
    in builtin badd endtime one;
  e <- ended;
  in_time = blk_leq after_end blk;
  flag = orb in_time e; 
  match flag with
    | True => 
      msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : late_to_bid_code};
      msgs = one_msg msg;
      send msgs
    | False =>
      hb <- highestBid;
      tmp1 = builtin lt _amount hb;
      match tmp1 with 
        | True =>
          msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : bid_too_low_code};
          msgs = one_msg msg;
          send msgs
        | False =>
          accept;
          hbPrev <- highestBidder;
          prs <- pendingReturns;
          tmp2 = builtin contains prs hbPrev;
          match tmp2 with
          | True =>
            pr  = builtin get prs hbPrev;
            hs1 = builtin add pr hb;
            prs1 = builtin put prs hbPrev hs1;
            pendingReturns := prs1;
            highestBidder := _sender;
            highestBid := _amount;
            msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0;
            code : updated_bid_accepted_code};
            msgs = one_msg msg;
            send msgs
          | False =>
            prs1 = builtin put prs hbPrev hb; 
            pendingReturns := prs1;
            highestBidder := _sender;
            highestBid := _amount;
            msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0;
            code : new_bid_accepted_code};
            msgs = one_msg msg;
            send msgs
         end
      end
    end
 end
  
  

(* Transition 2: claiming money back *)
transition Withdraw ()
  prs <- pendingReturns;
  b = buitin contains prs _sender;
  match b with
    | True =>
      pr = builtin get prs _sender;
      prs1 = builtin remove prs _sender; 
      pendingReturns := prs1;
      msg  = {_tag : "Main"; _recipient : _sender; _amount : pr; code : money_sent_code};
      msgs = one_msg msg;
      send msgs
    | False =>
      msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : nothing_to_withdraw_code};
      msgs = one_msg msg;
      send msgs
 end
end


(* Transition 3: auction ends *)
transition AuctionEnd ()
  blk <- & BLOCKNUMBER;
  e <- ended;
  t1 = builtin badd auctionStart biddingTime;
  t2 = blk_leq blk t1;
  t3 = neg e;
  t4 = orb t2 t3;
  match t4 with
    | True =>
      msg  = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : auction_is_still_on_code};
      msgs = one_msg msg;
      send msgs
    | False =>
      tt = True;
      ended := tt;    
      hb <- highestBid;
      msg  = {_tag : "Main"; _recipient : beneficiary; _amount : hb; code : auction_end_code; highest_bid : hb};
      msgs = one_msg msg;
      send msgs
    end
end
