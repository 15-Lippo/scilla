scilla_version 0

import ListUtils

library AddressListTraversalLib

let f : (ByStr20 with contract end)
        -> (ByStr20 with contract end)
        -> (ByStr20 with contract end)
        -> List (ByStr20 with contract end) =
  fun (x : ByStr20 with contract end) =>
  fun (y : ByStr20 with contract end) =>
  fun (z : ByStr20 with contract end) =>
    let n = Nil {ByStr20 with contract end} in
    let c1 = Cons {ByStr20 with contract end} x n in
    let c2 = Cons {ByStr20 with contract end} y c1 in
    Cons {ByStr20 with contract end} z c2

contract AddressListTraversal(cparam : ByStr20 with end)

field res_list : List (ByStr20 with end) = Nil {ByStr20 with end}
field res_mem : Bool = False

transition Test1 (param1 : ByStr20 with contract field f : Uint32 end,
                  param2 : ByStr20 with contract field f : Uint32 end,
                  param3 : ByStr20 with contract field f : Uint32 end)
  l = f param1 param2 param3; (* This removes knowledge about f *)
  fold = @list_foldl (ByStr20 with contract field f : Uint32 end) (List (ByStr20 with contract field f : Uint32 end));
  iter_f = fun (acc : List (ByStr20 with contract field f : Uint32 end)) => fun (x : ByStr20 with contract field f : Uint32 end) => Cons {ByStr20 with contract field f : Uint32 end} x acc ;
  init = Nil {ByStr20 with contract field f : Uint32 end};
  res = fold iter_f init l;
  res_list := res
end
